
 //----------------------------------------------
 //
 //        Sketch Generated by Visuino
 //              www.visuino.com
 //          Version 7.8.3.60
 //
 //----------------------------------------------

#define VISUINO_ARDUINO_NANO

#include <OpenWire.h>
#include <Mitov.h>
#include <Mitov_SineGenerator.h>

// Arduino Constant Declarations

namespace VisuinoConstants
{
class FloatValue3
{
public:
    inline static constexpr float GetValue() { return 0.300000011920929; }
};

class FloatValue4
{
public:
    inline static constexpr float GetValue() { return 0.100000001490116; }
};

class FloatValue2
{
public:
    inline static constexpr float GetValue() { return 0; }
};

class FloatValue0
{
public:
    inline static constexpr float GetValue() { return 0.5; }
};

class FloatValue1
{
public:
    inline static constexpr float GetValue() { return 1; }
};

} // VisuinoConstants

// System Objects Declarations

namespace BoardDeclarations
{
Mitov::TElapsedMicros ElapsedSystemMicros;
} // BoardDeclarations

// Declarations

namespace Declarations
{
Mitov::TypedFrequencyGenerator<
  Mitov::ConstantPropertyFloat<4, float, ::VisuinoConstants::FloatValue0 >, // Amplitude
  Mitov::EmptyProperty<22>, // Asymmetry
  Mitov::SineAnalogGenerator, // BASE
  Mitov::ConstantProperty<8, bool, true >, // Enabled
  Mitov::ConstantPropertyFloat<6, float, ::VisuinoConstants::FloatValue1 >, // Frequency
  Mitov::ConstantPropertyFloat<5, float, ::VisuinoConstants::FloatValue0 >, // Offset
  Mitov::AnalogPin_DirectBoardPinImplementation<3 >, // OutputPin
  Mitov::ConstantPropertyFloat<7, float, ::VisuinoConstants::FloatValue2 >, // Phase
  float // TYPE
   > _o_SineAnalogGenerator1;

Mitov::TypedFrequencyGenerator<
  Mitov::ConstantPropertyFloat<4, float, ::VisuinoConstants::FloatValue0 >, // Amplitude
  Mitov::EmptyProperty<22>, // Asymmetry
  Mitov::SineAnalogGenerator, // BASE
  Mitov::ConstantProperty<8, bool, true >, // Enabled
  Mitov::ConstantPropertyFloat<6, float, ::VisuinoConstants::FloatValue3 >, // Frequency
  Mitov::ConstantPropertyFloat<5, float, ::VisuinoConstants::FloatValue0 >, // Offset
  Mitov::AnalogPin_DirectBoardPinImplementation<5 >, // OutputPin
  Mitov::ConstantPropertyFloat<7, float, ::VisuinoConstants::FloatValue2 >, // Phase
  float // TYPE
   > _o_SineAnalogGenerator2;

Mitov::TypedFrequencyGenerator<
  Mitov::ConstantPropertyFloat<4, float, ::VisuinoConstants::FloatValue0 >, // Amplitude
  Mitov::EmptyProperty<22>, // Asymmetry
  Mitov::SineAnalogGenerator, // BASE
  Mitov::ConstantProperty<8, bool, true >, // Enabled
  Mitov::ConstantPropertyFloat<6, float, ::VisuinoConstants::FloatValue4 >, // Frequency
  Mitov::ConstantPropertyFloat<5, float, ::VisuinoConstants::FloatValue0 >, // Offset
  Mitov::AnalogPin_DirectBoardPinImplementation<6 >, // OutputPin
  Mitov::ConstantPropertyFloat<7, float, ::VisuinoConstants::FloatValue2 >, // Phase
  float // TYPE
   > _o_SineAnalogGenerator3;

} // Declarations

namespace ComponentsHardware
{
void SystemUpdateHardware()
{
}
} // ComponentsHardware

//The setup function is called once at startup of the sketch
void setup()
{
  BoardDeclarations::ElapsedSystemMicros.SystemStarted();
  Declarations::_o_SineAnalogGenerator1.SystemStartGenerate();
  Declarations::_o_SineAnalogGenerator2.SystemStartGenerate();
  Declarations::_o_SineAnalogGenerator3.SystemStartGenerate();

  OpenWire::SystemStarted();
}

// The loop function is called in an endless loop
void loop()
{
  unsigned long AElapsedMicros = BoardDeclarations::ElapsedSystemMicros.GetNewElapsedTime();
  Declarations::_o_SineAnalogGenerator1.SystemLoopBeginPhase( AElapsedMicros );
  Declarations::_o_SineAnalogGenerator1.SystemLoopBegin();
  Declarations::_o_SineAnalogGenerator2.SystemLoopBeginPhase( AElapsedMicros );
  Declarations::_o_SineAnalogGenerator2.SystemLoopBegin();
  Declarations::_o_SineAnalogGenerator3.SystemLoopBeginPhase( AElapsedMicros );
  Declarations::_o_SineAnalogGenerator3.SystemLoopBegin();
}
